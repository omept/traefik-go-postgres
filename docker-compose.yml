version: "3.7"

services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=false" # Disable insecure dashboard
      - "--api.dashboard=true" # Enable the dashboard, but secure it with basic auth
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=your-email@example.com"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
      - "--accesslog=true" # Enable access logs
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-certificates:/letsencrypt"
    networks:
      - frontend # Only connect Traefik to the frontend network

  go-app:
    image: your-go-app-image
    container_name: go-app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go-app.rule=Host(`yourdomain.com`)"
      - "traefik.http.routers.go-app.entrypoints=websecure"
      - "traefik.http.routers.go-app.tls.certresolver=mytlschallenge"
      - "traefik.http.services.go-app.loadbalancer.server.port=8088"
      - "traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secure-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.secure-headers.headers.customResponseHeaders.Content-Security-Policy=default-src 'self'"
      - "traefik.http.middlewares.secure-headers.headers.customResponseHeaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.secure-headers.headers.customResponseHeaders.X-XSS-Protection=1; mode=block"
    networks:
      - frontend # Connect Go app to both frontend and backend networks
      - backend

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend # Only connect Postgres to the backend network

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  traefik-certificates:
  pgdata:
